import itertools
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import NullFormatter
import pandas as pd
import numpy as np
import matplotlib.ticker as ticker
from sklearn import preprocessing
%matplotlib inline

#notice: Disable all warnings 
import warnings
warnings.filterwarnings('ignore')

### About dataset


This dataset is about past loans. The **Loan_train.csv** data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:

| Field          | Description                                                                           |
| -------------- | ------------------------------------------------------------------------------------- |
| Loan_status    | Whether a loan is paid off on in collection                                           |
| Principal      | Basic principal loan amount at the                                                    |
| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |
| Effective_date | When the loan got originated and took effects                                         |
| Due_date       | Since it’s one-time payoff schedule, each loan has one single due date                |
| Age            | Age of applicant                                                                      |
| Education      | Education of applicant                                                                |
| Gender         | The gender of applicant                                                               |


Let's download the dataset


!wget -O loan_train.csv https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/loan_train.csv

### Load Data From CSV File


df = pd.read_csv('loan_train.csv')
df.head()

df.shape

### Convert to date time object


df['due_date'] = pd.to_datetime(df['due_date'])
df['effective_date'] = pd.to_datetime(df['effective_date'])
df.head()

# Data visualization and pre-processing


Let’s see how many of each class is in our data set


df['loan_status'].value_counts()

260 people have paid off the loan on time while 86 have gone into collection


Let's plot some columns to underestand data better:


# notice: installing seaborn might takes a few minutes
!pip install seaborn

import seaborn as sns

bins = np.linspace(df.Principal.min(), df.Principal.max(), 10)
g = sns.FacetGrid(df, col="Gender", hue="loan_status", palette="Set1", col_wrap=2)
g.map(plt.hist, 'Principal', bins=bins, ec="k")

g.axes[-1].legend()
plt.show()

bins = np.linspace(df.age.min(), df.age.max(), 10)
g = sns.FacetGrid(df, col="Gender", hue="loan_status", palette="Set1", col_wrap=2)
g.map(plt.hist, 'age', bins=bins, ec="k")

g.axes[-1].legend()
plt.show()

# Pre-processing:  Feature selection/extraction


### Let's look at the day of the week people get the loan


df['dayofweek'] = df['effective_date'].dt.dayofweek
bins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)
g = sns.FacetGrid(df, col="Gender", hue="loan_status", palette="Set1", col_wrap=2)
g.map(plt.hist, 'dayofweek', bins=bins, ec="k")
g.axes[-1].legend()
plt.show()


We see that people who get the loan at the end of the week don't pay it off, so let's use Feature binarization to set a threshold value less than day 4


df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)
df.head()

## Convert Categorical features to numerical values


Let's look at gender:


df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)

86 % of female pay there loans while only 73 % of males pay there loan


Let's convert male to 0 and female to 1:


df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)
df.head()

## One Hot Encoding

#### How about education?


df.groupby(['education'])['loan_status'].value_counts(normalize=True)

#### Features before One Hot Encoding


df[['Principal','terms','age','Gender','education']].head()

#### Use one hot encoding technique to conver categorical varables to binary variables and append them to the feature Data Frame


Feature = df[['Principal','terms','age','Gender','weekend']]
Feature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)
Feature.drop(['Master or Above'], axis = 1,inplace=True)
Feature.head()


### Feature Selection


Let's define feature sets, X:


X = Feature
X[0:5]

What are our lables?


y = df['loan_status'].values
y[0:5]

## Normalize Data


Data Standardization give data zero mean and unit variance (technically should be done after train test split)


X= preprocessing.StandardScaler().fit(X).transform(X)
X[0:5]

# Classification


Now, it is your turn, use the training set to build an accurate model. Then use the test set to report the accuracy of the model
You should use the following algorithm:

*   K Nearest Neighbor(KNN)
*   Decision Tree
*   Support Vector Machine
*   Logistic Regression

\__ Notice:\__

*   You can go above and change the pre-processing, feature selection, feature-extraction, and so on, to make a better model.
*   You should use either scikit-learn, Scipy or Numpy libraries for developing the classification algorithms.
*   You should include the code of the algorithm in the following cells.


# K Nearest Neighbor(KNN)

Notice: You should find the best k to build the model with the best accuracy.\
**warning:** You should not use the **loan_test.csv** for finding the best k, however, you can split your train_loan.csv into train and test to find the best **k**.


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

from sklearn.neighbors import KNeighborsClassifier

k = 12
#Train Model and Predict  
neigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)
neigh

yhatk = neigh.predict(X_test)
yhatk[0:5]

Ks = 12
mean_acc = np.zeros((Ks-1))
std_acc = np.zeros((Ks-1))

for n in range(1,Ks):
    
    #Train Model and Predict  
    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)
    yhatk=neigh.predict(X_test)
    mean_acc[n-1] = metrics.accuracy_score(y_test, yhatk)

    
    std_acc[n-1]=np.std(yhatk==y_test)/np.sqrt(yhatk.shape[0])

mean_acc

plt.plot(range(1,Ks),mean_acc,'g')
plt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)
plt.fill_between(range(1,Ks),mean_acc - 3 * std_acc,mean_acc + 3 * std_acc, alpha=0.10,color="green")
plt.legend(('Accuracy ', '+/- 1xstd','+/- 3xstd'))
plt.ylabel('Accuracy ')
plt.xlabel('Number of Neighbors (K)')
plt.tight_layout()
plt.show()

print( "The best accuracy was with", mean_acc.max(), "with k=", mean_acc.argmax()+1) 

from sklearn.metrics import f1_score
KF1 = f1_score(y_test, yhatk, average='weighted') 
print("KNN F1 score: %.2f" % KF1)

from sklearn.metrics import jaccard_score
KJS = jaccard_score(y_test, yhatk, pos_label='PAIDOFF')
print("KNN Jaccard score: %.2f" % KJS)

# Decision Tree


from sklearn.tree import DecisionTreeClassifier
import sklearn.tree as tree
loanTree = DecisionTreeClassifier(criterion="entropy", max_depth = 4)
loanTree

loanTree.fit(X_train,y_train)

predTree = loanTree.predict(X_test)

print (predTree[0:5])
print (y_test[0:5])

from sklearn import metrics
import matplotlib.pyplot as plt
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(y_test, predTree))

from sklearn.metrics import f1_score
DTF1 = f1_score(y_test, predTree, average='weighted')
print("DT F1 score: %.2f" % DTF1)

from sklearn.metrics import jaccard_score
DTJS = jaccard_score(y_test, predTree, pos_label='PAIDOFF')
print("DT Jaccard score: %.2f" % DTJS)

# Support Vector Machine


from sklearn import svm
clf = svm.SVC(kernel='rbf')
clf.fit(X_train, y_train)

yhatsvm = clf.predict(X_test)
yhatsvm [0:5]

from sklearn.metrics import f1_score
SVMF1 = f1_score(y_test, yhatsvm, average='weighted') 
print("SVM F1 score: %.2f" % SVMF1)

from sklearn.metrics import jaccard_score
SVMJS = jaccard_score(y_test, yhatsvm, pos_label='PAIDOFF')
print("SVM Jaccard score: %.2f" % SVMJS)

# Logistic Regression


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
LogR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)
LogR

yhat = LR.predict(X_test)
yhat

yhat_prob = LR.predict_proba(X_test)
yhat_prob

from sklearn.metrics import f1_score
LRF1 = f1_score(y_test, yhat, pos_label='PAIDOFF') 
print("LR F1 score: %.2f" % LRF1)

from sklearn.metrics import jaccard_score
LRJS = jaccard_score(y_test, yhat, pos_label='PAIDOFF')
print("LR Jaccard score: %.2f" % LRJS)

from sklearn.metrics import log_loss
LRLL = log_loss(y_test, yhat_prob)
print("LR Log loss: %.2f" % LRLL)

# Model Evaluation using Test set


from sklearn.metrics import jaccard_score
from sklearn.metrics import f1_score
from sklearn.metrics import log_loss


First, download and load the test set:


!wget -O loan_test.csv https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/loan_test.csv

### Load Test set for evaluation


test_df = pd.read_csv('loan_test.csv')
test_df.head()

X= preprocessing.StandardScaler().fit(X).transform(X)
X[0:5]
Y = test_df['loan_status'].values
Y[0:5]

yhatKNN = neigh.predict(X)
KNNJaccard = jaccard_score(y, yhatKNN, pos_label='PAIDOFF')
KNNF1 = f1_score(y, yhatKNN, average='weighted')
print("KNN F1 Score: %.2f" % KNNF1 )
print("KNN Jaccard Score: %.2f" % KNNJaccard)

yhatDEC = loanTree.predict(X)
DTJST = jaccard_score(y, yhatDEC, pos_label='PAIDOFF')
DTF1T = f1_score(y, yhatDEC, average='weighted')
print("Decision Tree F1 Score: %.2f" % DTF1T )
print("Decision Tree Jaccard Score: %.2f" % DTJST)

yhatSVM = clf.predict(X)
SVMJST = jaccard_score(y, yhatSVM, pos_label='PAIDOFF')
SVMF1T = f1_score(y, yhatSVM, average='weighted')
print("SVM F1 Score: %.2f" % SVMF1T)
print("SVM Jaccard Score: %.2f" % SVMJST)

yhatLR = LogR.predict(X)
yhatLRproba = LogR.predict_proba(X)
LRJST = jaccard_score(y, yhatLR, pos_label='PAIDOFF')
LRF1T = f1_score(y, yhatLR, pos_label='PAIDOFF')
LRLLT = log_loss(y, yhatLRproba)
print("LR Log Loss: : %.2f" % LRLLT)
print("LR F1 Score: %.2f" % LRF1T)
print("LR Jaccard Score: %.2f" % LRJST)
